#!/usr/bin/env ruby
require 'highline'

HighLine.color_scheme = HighLine::SampleColorScheme.new
t = HighLine.new(STDIN, STDOUT)

filter = ARGV.first
CONTEXT_COLOR = 'CYAN'
PROJECT_COLOR = 'RED'

def colorize s
  # color @contexts and +projects
  s.gsub(/@\S+/) {|m| "<%= color '#{m}', #{CONTEXT_COLOR} %>" }.
    gsub(/\+[\S]+/) {|m| "<%= color '#{m}', #{PROJECT_COLOR} %>" }
end

def mark_priority s
  return s unless  s =~ /!/ 
  s.chomp!
  erb_re =  Regexp.new "<%=.+%>"
  style = s =~ /!!!/ ?  ':blink, :warning' : ':warning' 
  s.split(erb_re).map {|a|
    [a, "<%= color '#{a}', #{style} %>"]
  }.each {|(old, new)|
    s.sub!(old, new)
  }
  s
end

if filter 
  strip_word_re = /#{Regexp.escape(filter.sub("/", ''))} */
  t.say "     #{colorize(filter)}"
  puts
end

while STDIN.gets
  next unless $_
  s = $_ 
  if filter 
    next unless s =~ strip_word_re 
    s.gsub!(strip_word_re, '') 
  end
  t.say mark_priority(colorize(s))
end

